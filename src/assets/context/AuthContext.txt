// src/assets/context/AuthContext.js
import React, { createContext, useState, useEffect, useContext } from 'react';
import axios from 'axios';
import { toast } from 'react-hot-toast';

const AuthContext = createContext();

export const useAuth = () => {
  return useContext(AuthContext);
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [favorites, setFavorites] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch user data on mount
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get('/user', { withCredentials: true });
        setUser(res.data.user);
        setLoading(false);
      } catch (error) {
        if (error.response && error.response.status === 403) {
          setUser(null);
        } else {
          console.log('Error fetching user data:', error);
        }
        setLoading(false);
      }
    };
    fetchUser();
  }, []);

  // Fetch favorites if the user is authenticated
  useEffect(() => {
    if (user) {
      const fetchFavorites = async () => {
        try {
          const res = await axios.get('/favorites', { withCredentials: true });
          setFavorites(res.data);
        } catch (error) {
          console.log('Error fetching favorites:', error);
          toast.error('Failed to load favorites.');
        }
      };
      fetchFavorites();
    } else {
      setFavorites([]);
    }
  }, [user]);

  // Handle logout
  const handleLogout = async () => {
    try {
      await axios.post('/user/logout', {}, { withCredentials: true });
      setUser(null);
      setFavorites([]);
      toast.success('Logged out successfully!');
    } catch (error) {
      console.log('Error logging out:', error);
      toast.error('Failed to log out.');
    }
  };

  const addFavorite = async (book) => {
    const isBookAlreadyInFavorites = favorites.some(fav => fav.id === book.id);

    if (isBookAlreadyInFavorites) {
      toast.error('This book is already in your favorites!');
      return;
    }

    const bookData = {
      id: book.id,
      title: book.volumeInfo.title,
      authors: book.volumeInfo.authors,
      imageUrl: book.volumeInfo.imageLinks?.thumbnail,
      description: book.volumeInfo.description || "No description available",
    };

    try {
      const res = await axios.post('/favorites/add', { book: bookData }, { withCredentials: true });
      setFavorites(prevFavorites => [...prevFavorites, res.data.favorite]);
      toast.success('Book added to favorites!');
    } catch (error) {
      console.log('Error adding favorite:', error);
      toast.error('Failed to add favorite.');
    }
  };

  const removeFavorite = async (bookId) => {
    try {
      await axios.delete(`/favorites/${bookId}`, { withCredentials: true });
      setFavorites(prevFavorites => prevFavorites.filter(fav => fav.id !== bookId));
      toast.success('Book removed from favorites!');
    } catch (error) {
      console.log('Error removing favorite:', error);
      toast.error('Failed to remove favorite.');
    }
  };

  return (
    <AuthContext.Provider value={{
      user,
      favorites,
      loading,
      addFavorite,
      removeFavorite,
      handleLogout,
    }}>
      {children}
    </AuthContext.Provider>
  );
};
