import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import { Toaster, toast } from 'react-hot-toast'; // Import toast
import '../../index.css';

const HomePage = ({ searchQuery, addFavorite }) => {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [favorites, setFavorites] = useState([]);



  // Fetch books data from Google Books API
  useEffect(() => {
    
    const fetchBooks = async () => {
      try {
        const response = await axios.get('https://www.googleapis.com/books/v1/volumes?q=best+books&maxResults=21&key=AIzaSyBJ_lsJaj7MJS9Lgyic6OJcTczDjiVJnlQ');
        setBooks(response.data.items);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching the books:', error);
        setError('Failed to fetch books. Please try again later.');
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  // Show loading spinner if books are being fetched
  if (loading) {
    return <div className="text-center py-20">Loading...</div>;
  }

  // Show error message if there's an issue fetching books
  if (error) {
    return <div className="text-center py-20 text-red-500">{error}</div>;
  }

  // Filter books based on search query
  const filteredBooks = books.filter((book) =>
    (book.volumeInfo.title && book.volumeInfo.title.toLowerCase().includes(searchQuery.toLowerCase())) ||
    (book.volumeInfo.authors && book.volumeInfo.authors.some((author) =>
      author.toLowerCase().includes(searchQuery.toLowerCase())
    ))
  );

  // Handle adding a book to the favorites list with toast notifications
  const handleAddFavorite = async (book) => {
    // Check if the book is already in favorites
    const isBookAlreadyInFavorites = favorites.some(fav => fav.id === book.id);
  
    if (isBookAlreadyInFavorites) {
      // Show a toast if the book is already in favorites
      toast.error('This book is already in your favorites!');
      return; // Exit early without adding the book
    }
  
    const bookData = {
      id: book.id,
      title: book.volumeInfo.title,
      authors: book.volumeInfo.authors,
      imageUrl: book.volumeInfo.imageLinks?.thumbnail,
      description: book.volumeInfo.description || "No description available",
    };
  
    try {
      const res = await axios.post(
        'http://localhost:3005/api/favorites/add',
        { book: bookData },
        { withCredentials: true }
      );
      // Update the favorites state with the new favorite book
      setFavorites((prevFavorites) => [...prevFavorites, res.data.favorite]);
      toast.success('Book added to favorites!');
    } catch (error) {
      console.log('Error adding favorite:', error);
  
      if (error.response && error.response.status === 400) {
        // If the error is a 400 (Bad Request), display a toast with the message from the backend
        toast.error(error.response.data.message || 'Failed to add favorite.');
      } else {
        // For other errors, display a generic toast
        toast.error('Failed to add favorite.');
      }
    }
  };
  // useEffect(()=>{
  //   console.log("Homepage Fav :", favorites);

  // }, [favorites]);
  

  return (
    <div className="bg-gray-100">
      <Toaster position="bottom-right" reverseOrder={false} /> {/* Toast container */}

      {/* Hero Section */}
      <section className="bg-[url(https://as2.ftcdn.net/v2/jpg/06/59/36/77/1000_F_659367778_NdVI1v6c7furKJE8DrEnRkVC52cHbvv1.jpg)] text-white py-35">
        <div className="container mx-auto text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">Welcome to Book Store</h1>
          <p className="text-lg md:text-xl mb-8">Discover your next great read!</p>
          <a href="/browsebooks" className="bg-yellow-300 text-blue-600 font-semibold py-2 px-8 rounded hover:bg-orange-400 transition duration-300">
            Browse Books
          </a>
        </div>
      </section>

      {/* Featured Books Section */}
      <section className="py-20">
        <div className="container mx-auto text-center">
          <h2 className="text-3xl font-bold mb-10">Featured Books</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 p-10">
            {filteredBooks.map((book) => (
              <div key={book.id} className="bg-white pt-8 shadow-lg rounded-lg overflow-hidden">
                <img
                  src={book.volumeInfo.imageLinks?.thumbnail || 'https://via.placeholder.com/300x400'}
                  alt={book.volumeInfo.title || 'Untitled'}
                  className="w-full h-64 object-contain"
                />
                <div className="p-8">
                  <h3 className="text-xl font-semibold">{book.volumeInfo.title || 'Untitled'}</h3>
                  <p className="text-gray-600">{book.volumeInfo.authors?.join(', ') || 'Unknown Author'}</p>
                  <p className="mt-2">{book.volumeInfo.description?.substring(0, 100) || 'No description available'}</p>
                  <Link to={`/read/${book.id}`} className="text-blue-600 hover:underline mt-4 inline-block">Read More</Link><br />
                  <button
                    onClick={() => handleAddFavorite(book)} // Handle favorite click with toast
                    className="bg-yellow-300 text-blue-600 font-semibold py-2 px-4 rounded mt-4 hover:bg-yellow-400 transition duration-300"
                  >
                    Add to Favorites
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
};

export default HomePage;
