import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../styles/Signup.css';
import axios from 'axios';
import toast from 'react-hot-toast';

function Signup() {
    const [profilePicture, setProfilePicture] = useState('');
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [imagePreview, setImagePreview] = useState('');
    const [otp, setOtp] = useState('');  // OTP state
    const [isOtpSent, setIsOtpSent] = useState(false);  // Check if OTP is sent
    const [isOtpVerified, setIsOtpVerified] = useState(false);  // Check if OTP is verified
    const [timer, setTimer] = useState(50);  // Timer state (5 minutes = 300 seconds)
    const navigate = useNavigate();

    // Start the countdown timer
    useEffect(() => {
        let interval;
        if (isOtpSent && timer > 0) {
            interval = setInterval(() => {
                setTimer(prevTimer => prevTimer - 1);
            }, 1000); // Decrease timer by 1 every second
        }

        if (timer === 0) {
            // OTP expired, navigate back to signup page and show a toast
            toast.error("OTP time is over. Please sign up again.");
            navigate('/signup');  // Redirect to signup page
            clearInterval(interval);
        }

        return () => clearInterval(interval); // Cleanup interval on component unmount or timer stop
    }, [isOtpSent, timer, navigate]);

    // Format time in MM:SS format
    const formatTime = (time) => {
        const minutes = Math.floor(time / 60);
        const seconds = time % 60;
        return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    };

    // Handle signup form submission (this now only sends the OTP)
    async function handleSubmit(e) {
        e.preventDefault();

        // Check if profile picture is uploaded
        if (!profilePicture) {
            toast.error('Please upload a profile picture');
            return;
        }

        const formData = new FormData();
        formData.append("username", username);
        formData.append("email", email);
        formData.append("password", password);
        formData.append("profilePicture", profilePicture);

        try {
            const res = await axios.post(
                'http://localhost:3005/api/user/signup',
                formData,
                {
                    headers: {
                        "Content-Type": 'multipart/form-data'
                    },
                    withCredentials: true,
                }
            );

            if (res.status === 201) {
                toast.success("Sign-up successful, OTP sent to your email.");
                setIsOtpSent(true);  // OTP sent after successful signup
            }
        } catch (error) {
            console.log(error);
            toast.error(error.response?.data?.message || 'An error occurred');
        }
    }

    // Handle OTP verification form submission (now, user is only created after OTP verification)
    async function handleOtpSubmit(e) {
        e.preventDefault();

        try {
            const res = await axios.post(
                'http://localhost:3005/api/user/verify-otp',
                { email, otp }
            );

            if (res.status === 200) {
                toast.success("OTP verified successfully.");

                // After OTP is verified, now create the user on the backend
                const userRes = await axios.post(
                    'http://localhost:3005/api/user/complete-signup',
                    { username, email, password, profilePicture },
                    {
                        headers: {
                            "Content-Type": 'multipart/form-data'
                        },
                        withCredentials: true,
                    }
                );

                if (userRes.status === 201) {
                    setIsOtpVerified(true);  // Mark OTP as verified
                    navigate('/login');  // Redirect to login page after successful signup
                } else {
                    toast.error('Error completing signup');
                }
            }
        } catch (error) {
            console.log(error);
            toast.error(error.response?.data?.message || 'Invalid OTP or error occurred');
        }
    }

    const handleProfilePictureChange = (e) => {
        const file = e.target.files[0];
        setProfilePicture(file);
        const reader = new FileReader();
        reader.onloadend = () => {
            setImagePreview(reader.result);
        };
        if (file) {
            reader.readAsDataURL(file);
        }
    };

    const handleProfilePictureClick = () => {
        document.getElementById('profilePictureInput').click();
    };

    return (
        <div className='bg-[url(https://images3.alphacoders.com/130/thumb-1920-1305890.jpeg)] h-screen w-full items-center flex justify-center'>
            <div className='childx'>
                <div className='box1'>
                    <h1 className='text-3xl text-white underline'>Sign-up</h1>
                </div>

                <div className='box2'>
                    {!isOtpSent ? (
                        <form onSubmit={handleSubmit}>
                            {/* Display the profile picture preview or placeholder */}
                            <div className='profile-image-preview'>
                                {imagePreview ? (
                                    <div className="profile-picture-container">
                                        <img src={imagePreview} alt="Profile Preview" className="profile-picture" />
                                        <div className="change-icon" onClick={handleProfilePictureClick}>
                                            <span className="change-icon-text">✏️</span> {/* Edit icon */}
                                        </div>
                                    </div>
                                ) : (
                                    <div className="profile-picture-placeholder cursor-pointer" onClick={handleProfilePictureClick}>
                                        <span className="profile-icon">+</span> {/* "+" icon */}
                                    </div>
                                )}
                            </div>

                            {/* Hidden file input */}
                            <input 
                                type="file" 
                                id="profilePictureInput" 
                                onChange={handleProfilePictureChange} 
                                style={{ display: 'none' }} // Hide the file input
                            />

                            <label htmlFor="username">Username</label>
                            <input type="text" required onChange={(e) => setUsername(e.target.value)} />
                            <label htmlFor="email">Email</label>
                            <input type="email" required onChange={(e) => setEmail(e.target.value)} />
                            <label htmlFor="password">Password</label>
                            <input type="password" required onChange={(e) => setPassword(e.target.value)} />
                            <button className='cursor-pointer' type='submit'>Submit</button>
                        </form>
                    ) : !isOtpVerified ? (
                        <form onSubmit={handleOtpSubmit}>
                            <label htmlFor="otp">Enter OTP</label>
                            <input
                                type="text"
                                required
                                value={otp}
                                onChange={(e) => setOtp(e.target.value)}
                                maxLength="6" // OTP should be 6 digits
                            />
                            <div>
                                <p>Time Remaining: {formatTime(timer)}</p> {/* Display remaining time */}
                            </div>
                            <button className='cursor-pointer' type="submit" disabled={timer === 0}>Verify OTP</button>
                        </form>
                    ) : (
                        <div>
                            <h2>Thank you for verifying your email!</h2>
                            <p>You are now registered.</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

export default Signup;
